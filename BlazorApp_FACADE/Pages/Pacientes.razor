@page "/pacientes"
@using BlazorApp_FACADE.Models
@using BlazorApp_FACADE.Services
@inject IPacienteService PacienteService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Gestión de Pacientes</h3>

<button class="btn btn-success mb-3" @onclick="MostrarModal">Nuevo Paciente</button>

@if (pacientes.Count == 0)
{
    <p>No hay pacientes registrados.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Cédula</th>
                <th>Edad</th>
                <th>Teléfono</th>
                <th>Correo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var paciente in pacientes)
            {
                <tr>
                    <td>@paciente.Nombre</td>
                    <td>@paciente.Cedula</td>
                    <td>@paciente.Edad</td>
                    <td>@paciente.Telefono</td>
                    <td>@paciente.Correo</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditarPaciente(paciente)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarPaciente(paciente.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.4);">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@PacienteActual" OnValidSubmit="GuardarPaciente">
                <div class="modal-header">
                    <h5 class="modal-title">@((PacienteActual.Id == 0) ? "Nuevo Paciente" : "Editar Paciente")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-2">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="PacienteActual.Nombre" />
                    </div>
                    <div class="mb-2">
                        <label>Cédula</label>
                        <InputText class="form-control" @bind-Value="PacienteActual.Cedula" />
                    </div>
                    <div class="mb-2">
                        <label>Edad</label>
                        <InputNumber class="form-control" @bind-Value="PacienteActual.Edad" />
                    </div>
                    <div class="mb-2">
                        <label>Teléfono</label>
                        <InputText class="form-control" @bind-Value="PacienteActual.Telefono" />
                    </div>
                    <div class="mb-2">
                        <label>Correo</label>
                        <InputText class="form-control" @bind-Value="PacienteActual.Correo" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" type="submit">Guardar</button>
                    <button class="btn btn-secondary" type="button" @onclick="CerrarModal">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<Paciente> pacientes = new();
    private Paciente PacienteActual = new();
    private bool modalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarPacientes();
    }

    private async Task CargarPacientes()
    {
        pacientes = await PacienteService.ObtenerPacientes();
    }

    private void MostrarModal()
    {
        PacienteActual = new Paciente();
        modalVisible = true;
    }

    private void EditarPaciente(Paciente paciente)
    {
        PacienteActual = new Paciente
        {
            Id = paciente.Id,
            Nombre = paciente.Nombre,
            Cedula = paciente.Cedula,
            Edad = paciente.Edad,
            Telefono = paciente.Telefono,
            Correo = paciente.Correo
        };
        modalVisible = true;
    }

    private void CerrarModal()
    {
        modalVisible = false;
    }

    private async Task GuardarPaciente()
    {
        bool exito;

        if (PacienteActual.Id == 0)
        {
            exito = await PacienteService.AgregarPaciente(PacienteActual);
        }
        else
        {
            exito = await PacienteService.EditarPaciente(PacienteActual);
        }

        if (exito)
        {
            await JS.InvokeVoidAsync("alert", "Paciente guardado correctamente.");
            modalVisible = false;
            await CargarPacientes();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al guardar el paciente.");
        }
    }

    private async Task EliminarPaciente(int id)
    {
        var confirmar = await JS.InvokeAsync<bool>("confirm", $"¿Deseas eliminar al paciente #{id}?");
        if (confirmar)
        {
            var exito = await PacienteService.EliminarPaciente(id);
            if (exito)
            {
                await JS.InvokeVoidAsync("alert", "Paciente eliminado.");
                await CargarPacientes();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error al eliminar el paciente.");
            }
        }
    }
}
